"""
Django settings for SecureCheckPlus project.

Generated by "django-admin startproject" using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import json
import logging
import os
import sys
from pathlib import Path


def get_env_variable_or_shutdown_gracefully(var_name):
    """Get the environment variable or shutdown gracefully."""
    try:
        if 'BUILD' in os.environ:
            return os.environ.get(var_name)
        else:
            return os.environ[var_name]
    except KeyError:
        print(f"Please set the {var_name} environment variable.")
        sys.exit(1)


# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

IS_DEV = get_env_variable_or_shutdown_gracefully("IS_DEV") == "True"

BASE_URL = os.environ.get("BASE_URL")

LDAP_ORGANISATION = os.environ.get("LDAP_ORGANISATION")
LDAP_DOMAIN = os.environ.get("LDAP_DOMAIN")
LDAP_BASE_DN = os.environ.get("LDAP_BASE_DN")
LDAP_HOST = os.environ.get("LDAP_HOST")
LDAP_ADMIN_DN = os.environ.get("LDAP_ADMIN_DN")
LDAP_ADMIN_PASSWORD = os.environ.get("LDAP_ADMIN_PASSWORD")
LDAP_USER_BASE_DN = os.environ.get("LDAP_USER_BASE_DN")
LDAP_ADMIN_GROUP_DN = os.environ.get("LDAP_ADMIN_GROUP_DN")
LDAP_BASE_GROUP_DN = os.environ.get("LDAP_BASE_GROUP_DN")
LDAP_USER_SEARCH_FILTER = os.environ.get("LDAP_USER_SEARCH_FILTER")

ADMIN_USERNAME = os.environ.get("ADMIN_USERNAME")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
USER_USERNAME = os.environ.get("USER_USERNAME")
USER_PASSWORD = os.environ.get("USER_PASSWORD")

# If not building image (no env variables set) and
# If LDAP_HOST has been set (LDAP is being used for authentication) -> all other LDAP variables need to be set
# If LDAP_HOST has not been set (Use the hardcoded admin and user for authentication) -> all the hardcoded admin and
#    user variables need to be set
if 'BUILD' not in os.environ and LDAP_HOST:
    if IS_DEV and not all([
        LDAP_ORGANISATION,
        LDAP_DOMAIN,
        LDAP_BASE_DN,
        LDAP_ADMIN_DN,
        LDAP_ADMIN_PASSWORD,
        LDAP_USER_BASE_DN,
        LDAP_ADMIN_GROUP_DN,
        LDAP_BASE_GROUP_DN,
        LDAP_USER_SEARCH_FILTER
    ]):
        print(
            "Error: All LDAP variables (LDAP_ADMIN_DN, LDAP_ADMIN_PASSWORD, LDAP_USER_BASE_DN, LDAP_ADMIN_GROUP_DN, LDAP_BASE_GROUP_DN, LDAP_USER_SEARCH_FILTER) need to be set if LDAP_HOST is set. Also, in dev-mode the variables for starting the LDAP-container need to be set (LDAP_ORGANISATION, LDAP_DOMAIN, LDAP_BASE_DN).")
        sys.exit(1)
    elif not IS_DEV and not all([
        LDAP_ADMIN_DN,
        LDAP_ADMIN_PASSWORD,
        LDAP_USER_BASE_DN,
        LDAP_ADMIN_GROUP_DN,
        LDAP_BASE_GROUP_DN,
        LDAP_USER_SEARCH_FILTER
    ]):
        raise ValueError(
            "Error: All LDAP variables (LDAP_ADMIN_DN, LDAP_ADMIN_PASSWORD, LDAP_USER_BASE_DN, LDAP_ADMIN_GROUP_DN, LDAP_BASE_GROUP_DN, LDAP_USER_SEARCH_FILTER) need to be set if LDAP_HOST is set.")
elif 'BUILD' not in os.environ:
    if not all([ADMIN_USERNAME, ADMIN_PASSWORD, USER_USERNAME, USER_PASSWORD]):
        print(
            "Error: ADMIN_USERNAME, ADMIN_PASSWORD, USER_USERNAME and USER_PASSWORD must be set if you are not using LDAP for authentication.")
        sys.exit(1)

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

additional_allowed_hosts = os.environ.get("ADDITIONAL_ALLOWED_HOSTS")

if additional_allowed_hosts:
    ALLOWED_HOSTS.extend(additional_allowed_hosts.split(","))

if IS_DEV:
    SECRET_KEY = "not_so_secret_key"
else:
    # email notifications are not supported yet!
    #    EMAIL_USE_TLS = True
    #    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    #    EMAIL_HOST = os.environ.get()["EMAIL_HOST"]
    #    EMAIL_PORT = os.environ.get()["EMAIL_PORT"]
    SECRET_KEY = get_env_variable_or_shutdown_gracefully("DJANGO_SECRET_KEY")

SALT = get_env_variable_or_shutdown_gracefully("SALT")

FULLY_QUALIFIED_DOMAIN_NAME = get_env_variable_or_shutdown_gracefully("FULLY_QUALIFIED_DOMAIN_NAME")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "HOST": get_env_variable_or_shutdown_gracefully("POSTGRES_HOST"),
        "NAME": get_env_variable_or_shutdown_gracefully("POSTGRES_DB"),
        "SCHEMA": "securecheckplus",
        "USER": get_env_variable_or_shutdown_gracefully("POSTGRES_USER"),
        "PASSWORD": get_env_variable_or_shutdown_gracefully("POSTGRES_PASSWORD"),
        "PORT": get_env_variable_or_shutdown_gracefully("POSTGRES_PORT")
    }
}

NVD_API_KEY = get_env_variable_or_shutdown_gracefully("NVD_API_KEY")

TEST_RUNNER = "securecheckplus.pytest_runner.PytestTestRunner"

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'login': '30/min',
    }
}

AUTHENTICATION_BACKENDS = [
    "webserver.manager.authentication_manager.AuthenticationBackend"
]

AUTH_USER_MODEL = "webserver.User"

INSTALLED_APPS = [
    "analyzer",
    "webserver",
    "corsheaders",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
]

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage"
    }
}

ROOT_URLCONF = "securecheckplus.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": False,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'rate_limit',
    }
}

WSGI_APPLICATION = "securecheckplus.wsgi.application"

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATICFILES_DIRS = [os.path.join(BASE_DIR, "assets")]
STATIC_URL = f"/{BASE_URL}/static/" if BASE_URL else "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # Location where the staticfiles will be collected

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logger Settings

# Define color codes for different log levels
COLOR_CODES = {
    "DEBUG": "\033[34m",  # Blue
    "INFO": "\033[32m",  # Green
    "WARNING": "\033[33m",  # Yellow
    "ERROR": "\033[31m",  # Red
    "CRITICAL": "\033[41m",  # Red background
}
RESET_CODE = "\033[0m"


# Custom formatter to inject color codes
class ColorFormatter(logging.Formatter):
    def format(self, record):
        log_color = COLOR_CODES.get(record.levelname, RESET_CODE)
        record.levelname = f"{log_color}{record.levelname}{RESET_CODE}"
        return super().format(record)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "colored",  # Use the custom colored formatter
        },
    },
    "loggers": {
        "analyzer": {
            "level": os.environ.get("ANALYZER_LOG_LEVEL", "INFO"),
            "handlers": ["console"],
            "propagate": False
        },
        "webserver": {
            "level": os.environ.get("WEBSERVER_LOG_LEVEL", "INFO"),
            "handlers": ["console"],
            "propagate": False
        },
        "django": {
            "level": os.environ.get("DJANGO_LOG_LEVEL", "INFO"),
            "handlers": ["console"],
            "propagate": False
        }
    },
    "formatters": {
        "colored": {
            "()": ColorFormatter,  # Use the custom formatter class
            "format": "%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        }
    }
}

# Security Settings
if "https" in FULLY_QUALIFIED_DOMAIN_NAME:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
else:
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    print("WARNING: CSRF deactivated for non HTTPS address!")

CORS_ALLOWED_ORIGINS = [
    FULLY_QUALIFIED_DOMAIN_NAME,
]
CSRF_TRUSTED_ORIGINS = [
    FULLY_QUALIFIED_DOMAIN_NAME,
]

SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_AGE = 60 * 60 * 24 * 30  # 30 days

# Content Security Policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_IMG_SRC = (
    "'self'",
    "data:",
    "*.interssl.com",
    "www.wkoecg.at",
    "*.geotrust.com",
    "*.paypal.com",
    "*.amazonaws.com",
    "*.google-analytics.com",
    "*.cloudflare.com",
    "api.dicebear.com",
)
