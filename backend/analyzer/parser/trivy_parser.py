"""
This module handles the parsing related to the reports generated by Trivy.
"""

import json
import logging

from utilities.exceptions import ParseError
from .types import ParseResult

logger = logging.getLogger(__name__)

priority = {"HIGHEST": 4,
            "HIGH": 3,
            "MEDIUM": 2,
            "LOW": 1}


def get_package_manager_name(type: str):
    match type:
        case "":
            return "NA"
        case "dotnet-core":
            return "nuget"
        case "pom":
            return "maven"
        case _:
            return type



def parse_json(json_data: str) -> dict[str, ParseResult]:
    """
    Parses the JSON Trivy report into a standardized dictionary.

    :param json_data: Trivy report as a JSON string or dictionary.
    :raises ParseError: Raises if an error occurred while trying to parse the report.
    :return: A dictionary with the result as the key and an array of detected vulnerabilities as a list.
    """

    try:
        if isinstance(json_data, dict):
            results = json_data["Results"]
        else:
            results = json.loads(json_data)["Results"]

        data: dict[str, ParseResult] = {}

        if results is not None:
            for result in results:
                package_manager = get_package_manager_name(result.get("Type", ""))
                vuls = result.get("Vulnerabilities")
                if vuls is not None:
                    for vul in vuls:
                        version = vul.get("InstalledVersion")
                        dependency_name = vul.get("PkgName")
                        vul_id = vul.get("VulnerabilityID")

                        if dependency_name in data:
                            data.get(dependency_name).vulnerabilities.append(vul_id)
                        else:
                            data[dependency_name] = ParseResult(
                                dependency_name=dependency_name,
                                version=version,
                                package_manager=package_manager,
                                license="NA",
                                vulnerabilities=[vul_id],
                                path="NA"
                            )
        return data

    except (KeyError, TypeError, json.decoder.JSONDecodeError) as error:
        error_message = str(error)
        logger.warning(f"Error while parsing JSON file: {error_message}")
        raise ParseError(f"Error while parsing JSON file: {error_message}")
